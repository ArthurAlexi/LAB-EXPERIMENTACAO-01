# -*- coding: utf-8 -*-
"""Script_mining_github.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dQn2A09mLPAvbyt1fMwKQWh1Qr3Vuc2Y

# Setup

## Importações
"""

import requests as req
import pandas as pd
import json
from datetime import datetime
from google.colab import userdata

"""## Constantes"""

DOMAIN = 'https://api.github.com/graphql'
TOKEN = userdata.get('token')
HEADERS = {
  'Authorization': f'bearer {TOKEN}',
  'Content-Type': 'application/json'
}
TODAY = datetime.now()
NUMBER_OF_REPOSITORIES=30

"""## Query Geral"""

query_geral = """
query geral_query {{
  search(query: "stars:>{0}", type: REPOSITORY, first: {0}) {{
    nodes {{
      ... on Repository {{
        nameWithOwner
        updatedAt
        createdAt
        releases{{
          totalCount
        }}
        nameWithOwner
        issues{{
          totalCount
        }}
        closedIssues: issues(states: CLOSED) {{
          totalCount
        }}
         primaryLanguage {{
          name
        }}
        releases{{
          totalCount
        }}
        pullRequests(states:MERGED){{
          totalCount
        }}
      }}
    }}
  }}
}}
""".format(NUMBER_OF_REPOSITORIES)

"""## Funções"""

def doPost(data : json)-> json:
  response = req.post(DOMAIN, headers=HEADERS, json=data)
  if response.status_code == 200:
    return response.json()

  raise Exception(f'Erro ao fazer requisição: {response.status_code} \n {response.text}')



def analisar_contribuicoes(repositorios):
    repo_data = []
    for repo in repositorios.get('data', {}).get('search', {}).get('nodes', []):
        if isinstance(repo, dict):
            repo_name = repo.get('nameWithOwner', '')
            pull_requests_data = repo.get('pullRequests', {})
            total_pull_requests = pull_requests_data.get('totalCount', 0)
            repo_data.append({'Repositório': repo_name, 'Total de PRs': total_pull_requests})

    return pd.DataFrame(repo_data)


def analisar_releases(repositorios):
    dados_repo = []
    for repo in repositorios.get('data', {}).get('search', {}).get('nodes', []):
        nome_repo = repo.get('nameWithOwner', '')
        dados_releases = repo.get('releases', {})
        total_releases = dados_releases.get('totalCount', 0)
        dados_repo.append({'Repositório': nome_repo, 'Total de Releases': total_releases})

    return pd.DataFrame(dados_repo)

def analisar_updates(repositorios):
    dados_repo = []
    for repo in repositorios.get('data', {}).get('search', {}).get('nodes', []):
        nome_repo = repo.get('nameWithOwner', '')
        atualizado_em = repo.get('updatedAt', '')
        data_ultimo_update = datetime.strptime(atualizado_em, '%Y-%m-%dT%H:%M:%SZ') if atualizado_em else None
        dias_desde_ultimo_update = (datetime.now() - data_ultimo_update).days if data_ultimo_update else None
        dados_repo.append({'Repositório': nome_repo, 'Data do Último Update': atualizado_em, 'Dias desde o Último Update': dias_desde_ultimo_update})

    return pd.DataFrame(dados_repo)

def analisar_linguagens(repositorios):
    dados_repo = []
    for repo in repositorios.get('data', {}).get('search', {}).get('nodes', []):
        nome_repo = repo.get('nameWithOwner', '')
        linguagem_principal = repo.get('primaryLanguage', {}).get('name') if repo.get('primaryLanguage') else ''
        dados_repo.append({'Repositório': nome_repo, 'Linguagem Mais Comum': linguagem_principal})

    return pd.DataFrame(dados_repo)

def analisar_issues_fechadas(repositorios):
    dados_repo = []
    for repo in repositorios.get('data', {}).get('search', {}).get('nodes', []):
        nome_repo = repo.get('nameWithOwner', '')
        total_issues = repo.get('issues', {}).get('totalCount', 0)
        total_issues_fechadas = repo.get('closedIssues', {}).get('totalCount', 0)

        percentual_issues_fechadas = (total_issues_fechadas / total_issues) * 100 if total_issues > 0 else 0
        dados_repo.append({'Repositório': nome_repo, 'Percentual de Issues Fechadas': percentual_issues_fechadas})

    return pd.DataFrame(dados_repo)

"""## Variáveis"""

data = {
    'query': query_geral
}

repositorios_geral = doPost(data)
contribuicoes_analisadas = analisar_contribuicoes(repositorios_geral)
releases_analisadas = analisar_releases(repositorios_geral)
updates_analisados = analisar_updates(repositorios_geral)
linguagens_analisadas = analisar_linguagens(repositorios_geral)
issues_fechadas_analisadas = analisar_issues_fechadas(repositorios_geral)

"""# Análises

## RQ 01: Sistemas populares são maduros/antigos?
### Métrica: idade do repositório (calculado a partir da data de sua criação)
"""

query_1 = """
query questao_1 {{
    search(query:"stars:>{0}", type:REPOSITORY, first:{0}){{
        nodes {{
            ... on Repository {{
                name
                createdAt
            }}
        }}
    }}
}}
""".format(NUMBER_OF_REPOSITORIES)

repositories = []
data = {
    'query': query_1
}
response_json = doPost(data)
repositories = response_json['data']['search']['nodes']

data_frame = pd.DataFrame(repositories)
created_dates = [datetime.strptime(date, '%Y-%m-%dT%H:%M:%SZ') for date in data_frame['createdAt']]
age_years = [round((TODAY - date).days / 365, 2) for date in created_dates]

data_frame['Age (Years)'] = age_years
mean_age = data_frame['Age (Years)'].mean()
data_frame.head(NUMBER_OF_REPOSITORIES)

# x=10
# if x > 5:
#   print('if')
# elif (x/2 == 0 and x< 5):
#     print('else')

"""## RQ 02: Sistemas populares recebem muita contribuição externa?
### Métrica: total de pull requests aceitas
"""

# query_2 = """
# query questao_2 {
#   search(query: "stars:>{0}", type: REPOSITORY, first: {0}) {
#     nodes {
#       ... on Repository {
#         nameWithOwner
#         pullRequests(states:MERGED){
#           totalCount
#         }
#       }
#     }
#   }
# }
# """.format(NUMBER_OF_REPOSITORIES)

contribuicoes_analisadas.head(NUMBER_OF_REPOSITORIES)

"""## RQ 03: Sistemas populares lançam releases com frequência?
### Métrica: total de releases
"""

# query_3 = """
# query questao_3 {
#   search(query: "stars:>{}", type: REPOSITORY, first: {0}) {
#     nodes {
#       ... on Repository {
#         nameWithOwner
#         releases{
#           totalCount
#         }
#       }
#     }
#   }
# }
# """.format(NUMBER_OF_REPOSITORIES)

releases_analisadas.head(NUMBER_OF_REPOSITORIES)

"""## RQ 04: Sistemas populares são atualizados com frequência?
### Métrica: tempo até a última atualização (calculado a partir da data de última atualização)
"""

# query_4 = """
# query questao_4 {
#   search(query: "stars:> {0}", type: REPOSITORY, first: {0}) {
#     nodes {
#       ... on Repository {
#         nameWithOwner
#         updatedAt
#       }
#     }
#   }
# }
# """.format(NUMBER_OF_REPOSITORIES)

updates_analisados.head(NUMBER_OF_REPOSITORIES)

"""## RQ 05: Sistemas populares são escritos nas <a href='https://octoverse.github.com/'>linguagens mais populares</a>?

### Métrica: linguagem primária de cada um desses repositórios
"""

# query_5 = """
# query questao_5 {
#   search(query: "stars:>{0}", type: REPOSITORY, first:{0}) {
#     nodes {
#       ... on Repository {
#         nameWithOwner
#         primaryLanguage {
#           name
#         }
#       }
#     }
#   }
# }
# """.format(NUMBER_OF_REPOSITORIES)

linguagens_analisadas.head(NUMBER_OF_REPOSITORIES)

"""## RQ 06: Sistemas populares possuem um alto percentual de issues fechadas?
### Métrica: Métrica: razão entre número de issues fechadas pelo total de issues)
"""

# query_6 = """
# query questao_6 {
#   search(query: "stars:>{0}", type: REPOSITORY, first: {0}) {
#     nodes {
#       ... on Repository {
#         nameWithOwner
#         issues{
#           totalCount
#         }
#         closedIssues: issues(states: CLOSED) {
#           totalCount
#         }
#       }
#     }
#   }
# }
# """.format(NUMBER_OF_REPOSITORIES)

issues_fechadas_analisadas.head(NUMBER_OF_REPOSITORIES)